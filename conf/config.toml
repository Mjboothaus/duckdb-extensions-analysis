# Configuration for DuckDB Extensions Analysis Tool
# Version is managed in pyproject.toml and loaded dynamically

[github]
api_base = "https://api.github.com"
community_repo = "duckdb/community-extensions"
duckdb_repo = "duckdb/duckdb"
accept_header = "application/vnd.github.v3+json"

[directories]
cache = ".cache"
reports = "reports"
data = "data"
sql = "sql"

[database]
filename = "extensions.duckdb"
# Set to true to enable historical tracking with versioned data
enable_history = false

[caching]
# Cache duration in hours
default_hours = 1
web_content_hours = 24

[analysis]
core_extensions_url = "https://duckdb.org/docs/stable/core_extensions/overview.html"

# GitHub issues analysis settings
enable_issues_analysis = false  # Set to true to enable GitHub issues analysis (may hit rate limits)
issues_analysis_days_back = 90  # How many days back to search for issues


# Fallback popular extensions if dynamic detection fails
popular_extensions = [
    "spatial", "httpfs", "parquet", "json", "aws", "azure", "postgres",
    "mysql", "sqlite", "bigquery", "arrow", "excel", "prql", "substrait", "h3"
]

[http]
timeout_seconds = 10
max_retries = 3
retry_min_wait_seconds = 1
retry_max_wait_seconds = 10

[fallback]
# Used if GitHub API fails to get latest DuckDB release
duckdb_version = "v1.4.0"
duckdb_release_date = "2025-09-16"

[logging]
level = "INFO"
format = "{time:YYYY-MM-DD HH:mm:ss} | {level} | {message}"