name: Daily DuckDB Extensions Report

on:
  schedule:
    - cron: '0 6 * * *'  # Daily at 6 AM UTC
  workflow_dispatch:      # Allow manual triggering

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  analyze-extensions:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Install uv
        uses: astral-sh/setup-uv@v3
      
      - name: Setup Python and dependencies
        run: |
          uv sync
      
      - name: Generate extensions report
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "ðŸš€ Starting DuckDB extensions analysis..."
          uv run scripts/cli.py report generate \
            --format markdown --format csv --format excel \
            --with-issues
          
          echo "âœ… Analysis complete. Generated files:"
          ls -la reports/
      
      - name: Update README with latest status
        run: ./scripts/update_readme.sh
      
      - name: Commit and push reports
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action Bot"
          
          # Add all report files and README
          git add reports/ README.md
          
          # Check if there are changes to commit
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "ðŸ“Š Daily extensions analysis: $(date -I)
            
            - Updated extension analysis for $(date -u '+%Y-%m-%d')
            - Generated markdown, CSV, and Excel reports
            - Includes GitHub issues analysis for extension health monitoring"
            git push
          fi

  deploy-to-pages:
    needs: analyze-extensions
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: main  # Ensure we get the updated reports
      
      - name: Setup Pages
        uses: actions/configure-pages@v4
      
      - name: Create Pages site
        run: |
          # Install markdown converter
          pip install markdown
          
          # Generate HTML using external script
          python scripts/build_report_site.py
          
          # Copy CSV and Excel files for download
          cp reports/*.csv reports/*.xlsx _site/ 2>/dev/null || true
          
          # Also copy the original markdown for direct access
          cp reports/latest.md _site/report.md
          
          echo "âœ… Pages site prepared with proper HTML rendering"
      
      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: '_site'
      
      - name: Deploy to Pages
        uses: actions/deploy-pages@v4